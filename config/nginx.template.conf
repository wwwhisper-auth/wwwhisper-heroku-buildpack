daemon off;
worker_processes auto;

events {
    use epoll;
    accept_mutex on;
    worker_connections 1024;
}


http {
    # To resolve WWWHISPER_URL.
    resolver 1.1.1.1;

    server_tokens off;

    # Let Heroku router and the application do the logging.
    access_log off;
    error_log /dev/stdout warn;

    client_body_timeout 10s;

    proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    proxy_ssl_verify on;
    proxy_ssl_verify_depth 2;
    proxy_ssl_session_reuse on;

    # Sets orig_proto to x_forwarded proto if present, otherwise
    # sets it to $scheme..
    map $http_x_forwarded_proto $orig_proto {
        ""       $scheme;
        default  $http_x_forwarded_proto;
    }

    # Allows to set upstream 'Connection' header to "upgrade" for web
    # socket creation requests or empty (defaults to "keep-alive") for
    # all other requests.
    map $http_upgrade $keepalive_or_upgrade {
        default "upgrade";
        "" "";
    }

    upstream app_server {
        server 127.0.0.1:${PRIVATE_PORT} max_fails=0;
        keepalive 16;
    }

    server {
        # Enables authorization for all locations on the server with the
        # exception of locations annotated with 'auth request off;'.
        auth_request /wwwhisper/auth/api/is-authorized/;
        auth_request_set $user $upstream_http_user;

        # nginx does not allow to return body of the auth request to the
        # user. To workaround this 401 and 403 errors re-execute the auth
        # request.
        error_page 401 /wwwhisper/auth/api/is-authorized/;
        error_page 403 /wwwhisper/auth/api/is-authorized/;
        # nginx returns 500 for any auth request error other than 401
        # and 403. To show the user the actual error message the auth
        # request is re-executed. The drawback of this workaround is
        # that 500 errors that are not caused by auth requests
        # (fortunately with the exception of upstream app 500 errors,
        # error_page directive doesn't affect them) return empty
        # documents instead of the default nginx 500 error page.
        #
        # The best approach would be to extend auth request to return
        # all error responses to the user.
        error_page 500 /wwwhisper/auth/api/is-authorized/;
        error_page 302 /wwwhisper/auth/api/is-authorized/;

        listen ${PUBLIC_PORT};
        server_name _;
      	keepalive_timeout 5;

        if ($http_user) {
            # Do not allow the client to overwrite authenticated user.
            return 400;
        }

        # Location to which nginx sends auth-requests.
        location /wwwhisper/auth/api/is-authorized/ {
            internal;
            auth_request off;

            include wwwhisper_proxy.conf;
            proxy_set_header User-Agent nginx-$nginx_version;
            proxy_method GET;
            proxy_pass_request_headers on;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";

            # $request_uri can contain query params (including another
            # path= arugment), but wwwhisper correctly accepts only
            # the first path argument (HTTP spec allows for multiple
            # '?' in URLs in which case only the first '?' should be
            # treated as the start of the query component).
            proxy_pass $wwwhisper_endpoint$document_uri?path=$request_uri;
        }

        location /wwwhisper/ {
            include wwwhisper_proxy.conf;
            proxy_pass $wwwhisper_endpoint;
            proxy_set_header User $user;
        }

        location /wwwhisper/auth {
            auth_request off;
            include wwwhisper_proxy.conf;
            proxy_pass $wwwhisper_endpoint;
        }

        location / {
            include proxy_common.conf;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header User $user;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $keepalive_or_upgrade;
            proxy_pass http://app_server;
            include wwwhisper_overlay.conf;
        }
    }
}
